definitions:
  calendar.CalendarEventsWithError:
    properties:
      calendarEvents:
        items:
          $ref: '#/definitions/models.CalendarEvent'
        type: array
      error:
        $ref: '#/definitions/errs.GoogleAPIError'
        type: object
    type: object
  commands.Response:
    properties:
      blocks:
        type: string
      response_type:
        description: ephemeral or in_channel
        type: string
      text:
        type: string
    type: object
  errs.GoogleAPIError:
    properties:
      code:
        type: integer
      details:
        type: object
      errors:
        type: object
      message:
        type: string
      status:
        type: string
    type: object
  models.CalendarAccount:
    properties:
      email:
        type: string
      enabled:
        type: boolean
      picture:
        type: string
      subCalendars:
        additionalProperties:
          $ref: '#/definitions/models.SubCalendar'
        type: object
    type: object
  models.CalendarEvent:
    properties:
      endDate:
        type: string
      startDate:
        type: string
      summary:
        type: string
    type: object
  models.Event:
    properties:
      _id:
        type: string
      calendarEventId:
        type: string
      dates:
        type: string
      duration:
        type: number
      name:
        type: string
      notificationsEnabled:
        type: boolean
      ownerId:
        type: string
      responses:
        additionalProperties:
          $ref: '#/definitions/models.Response'
        description: Availability responses
        type: object
      scheduledEvent:
        $ref: '#/definitions/models.CalendarEvent'
        description: Scheduled event
        type: object
      type:
        type: string
    type: object
  models.EventType:
    type: string
  models.Location:
    properties:
      city:
        type: string
      country_code:
        type: string
      country_name:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      postal:
        type: string
      state:
        type: string
    type: object
  models.Response:
    properties:
      availability:
        type: string
      name:
        type: string
      user:
        $ref: '#/definitions/models.User'
        type: object
      userId:
        type: string
    type: object
  models.SubCalendar:
    properties:
      enabled:
        type: boolean
      name:
        type: string
    type: object
  models.User:
    properties:
      _id:
        description: Profile info
        type: string
      calendarAccounts:
        additionalProperties:
          $ref: '#/definitions/models.CalendarAccount'
        description: |-
          CalendarAccounts is a mapping from {email => CalendarAccount} that contains all the
          additional accounts the user wants to see google calendar events for
        type: object
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      picture:
        type: string
      timezoneOffset:
        type: integer
    type: object
  responses.Error:
    properties:
      error:
        type: object
    required:
    - error
    type: object
host: localhost:3002
info:
  contact: {}
  description: This is the API for Schej.it!
  license: {}
  title: Schej.it API
  version: "1.0"
paths:
  /analytics/scanned-poster:
    post:
      consumes:
      - application/json
      parameters:
      - description: Object containing the location that poster was scanned from and
          the url that was scanned
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              location:
                $ref: '#/definitions/models.Location'
              url:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Notifies us when poster QR code has been scanned
      tags:
      - analytics
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Signs user in and sets the access token session variable
      parameters:
      - description: Object containing the Google authorization code and the user's
          timezone offset
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              code:
                type: string
              timezoneOffset:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user in
      tags:
      - auth
  /auth/sign-in-mobile:
    post:
      consumes:
      - application/json
      description: Signs user in and sets the access token session variable
      parameters:
      - description: Object containing the Google authorization code and the user's
          timezone offset
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              accessToken:
                type: string
              expiresIn:
                type: integer
              idToken:
                type: string
              refreshToken:
                type: string
              scope:
                type: string
              timezoneOffset:
                type: integer
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user in from mobile
      tags:
      - auth
  /auth/sign-out:
    post:
      consumes:
      - application/json
      description: Signs user out and deletes the session
      produces:
      - application/json
      responses:
        "200": {}
      summary: Signs user out
      tags:
      - auth
  /auth/status:
    get:
      description: Returns a 401 error if user is not signed in, 200 if they are
      responses:
        "200": {}
        "401":
          description: Error object
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Gets whether the user is signed in or not
      tags:
      - auth
  /events:
    post:
      consumes:
      - application/json
      parameters:
      - description: Object containing info about the event to create
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              dates:
                items:
                  type: string
                type: array
              duration:
                type: number
              name:
                type: string
              notificationsEnabled:
                type: boolean
              type:
                $ref: '#/definitions/models.EventType'
            type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - type: object
            - properties:
                eventId:
                  type: string
              type: object
      summary: Creates a new event
      tags:
      - events
  /events/{eventId}:
    delete:
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: Deletes an event based on its id
      tags:
      - events
    get:
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Event'
      summary: Gets an event based on its id
      tags:
      - events
    put:
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Object containing info about the event to update
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              dates:
                items:
                  type: string
                type: array
              duration:
                type: number
              name:
                type: string
              notificationsEnabled:
                type: boolean
              type:
                $ref: '#/definitions/models.EventType'
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Edits an event based on its id
      tags:
      - events
  /events/{eventId}/response:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Object containing info about the event response to delete
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              guest:
                type: boolean
              name:
                type: string
              userId:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Delete the current user's availability
      tags:
      - events
    post:
      consumes:
      - application/json
      parameters:
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: string
      - description: Object containing info about the event response to update
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              availability:
                items:
                  type: string
                type: array
              guest:
                type: boolean
              name:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Updates the current user's availability
      tags:
      - events
  /slackbot:
    post:
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      responses:
        "200":
          description: Text response
          schema:
            $ref: '#/definitions/commands.Response'
      summary: Gets the number of signed up users
      tags:
      - slackbot
  /user:
    delete:
      produces:
      - application/json
      responses:
        "200": {}
      summary: Deletes the currently signed in user
      tags:
      - user
  /user/add-calendar-account:
    post:
      consumes:
      - application/json
      parameters:
      - description: Object containing the Google authorization code
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              code:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Adds a new calendar account
      tags:
      - user
  /user/calendars:
    get:
      description: Gets the user's calendar events between "timeMin" and "timeMax"
      parameters:
      - description: Lower bound for event's start time to filter by
        in: query
        name: timeMin
        required: true
        type: string
      - description: Upper bound for event's end time to filter by
        in: query
        name: timeMax
        required: true
        type: string
      - description: Comma separated list of accounts to fetch calendar events from
        in: query
        name: accounts
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/calendar.CalendarEventsWithError'
            type: object
      summary: Gets the user's calendar events
      tags:
      - user
  /user/events:
    get:
      description: Returns an array containing all the user's events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - type: object
            - properties:
                events:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
                joinedEvents:
                  items:
                    $ref: '#/definitions/models.Event'
                  type: array
              type: object
      summary: Gets all the user's events
      tags:
      - user
  /user/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: A user profile object
          schema:
            $ref: '#/definitions/models.User'
      summary: Gets the user's profile
      tags:
      - user
  /user/remove-calendar-account:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Object containing the email of the calendar account to remove
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              email:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Removes an existing calendar account
      tags:
      - user
  /user/searchContacts:
    get:
      parameters:
      - description: Query to search for
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Searches the user's contacts based on the given query
      tags:
      - user
  /user/toggle-calendar:
    post:
      consumes:
      - application/json
      parameters:
      - description: Email of calendar account and whether to enable it
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              email:
                type: string
              enabled:
                type: boolean
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Toggles whether the specified calendar is enabled or disabled for the
        user
      tags:
      - user
  /user/toggle-sub-calendar:
    post:
      consumes:
      - application/json
      parameters:
      - description: Email of calendar account, the sub calendar id, and whether to
          enable it
        in: body
        name: payload
        required: true
        schema:
          allOf:
          - type: object
          - properties:
              email:
                type: string
              enabled:
                type: boolean
              subCalendarId:
                type: string
            type: object
      produces:
      - application/json
      responses:
        "200": {}
      summary: Toggles whether the specified sub-calendar is enabled or disabled for
        the user
      tags:
      - user
  /users:
    get:
      parameters:
      - description: Search query matching users' names/emails
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: An array of user profile objects
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Returns users that match the search query
      tags:
      - users
swagger: "2.0"
